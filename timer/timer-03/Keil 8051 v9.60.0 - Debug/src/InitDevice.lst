C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/23/2021 11:07:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\kovac\D
                    -esktop\miclab-zh-1\efm8-bb1-low-cost-board\timer\timer-03\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARN
                    -INGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\kovac\Desktop\m
                    -iclab-zh-1\efm8-bb1-low-cost-board\timer\timer-03\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Dev
                    -ice/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/EFM8BB1/inc) PRINT(.\src\Ini
                    -tDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_1_enter_DefaultMode_from_RESET ();
  28   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  29   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  30   1        // [Config Calls]$
  31   1      
  32   1      }
  33          
  34          extern void
  35          WDT_0_enter_DefaultMode_from_RESET (void)
  36          {
  37   1        // $[Watchdog Timer Init Variable Declarations]
  38   1        uint32_t i;
  39   1        bool ea;
  40   1        // [Watchdog Timer Init Variable Declarations]$
  41   1      
  42   1        // $[WDTCN - Watchdog Timer Control]
  43   1        // Deprecated
  44   1        // [WDTCN - Watchdog Timer Control]$
  45   1      
  46   1        // $[WDTCN_2 - Watchdog Timer Control]
  47   1      
  48   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  49   1        WDTCN = 0xA5;
  50   1      
  51   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/23/2021 11:07:02 PAGE 2   

  52   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  53   1          {
  54   2            NOP ();
  55   2          }
  56   1      
  57   1        // Disable WDT
  58   1        ea = IE_EA;
  59   1        IE_EA = 0;
  60   1        WDTCN = 0xDE;
  61   1        WDTCN = 0xAD;
  62   1        IE_EA = ea;
  63   1      
  64   1        // [WDTCN_2 - Watchdog Timer Control]$
  65   1      
  66   1      }
  67          
  68          extern void
  69          PORTS_1_enter_DefaultMode_from_RESET (void)
  70          {
  71   1        // $[P1 - Port 1 Pin Latch]
  72   1        // [P1 - Port 1 Pin Latch]$
  73   1      
  74   1        // $[P1MDOUT - Port 1 Output Mode]
  75   1        /***********************************************************************
  76   1         - P1.0 output is open-drain
  77   1         - P1.1 output is open-drain
  78   1         - P1.2 output is open-drain
  79   1         - P1.3 output is open-drain
  80   1         - P1.4 output is push-pull
  81   1         - P1.5 output is open-drain
  82   1         - P1.6 output is open-drain
  83   1         - P1.7 output is open-drain
  84   1         ***********************************************************************/
  85   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
  86   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
  87   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
  88   1            | P1MDOUT_B7__OPEN_DRAIN;
  89   1        // [P1MDOUT - Port 1 Output Mode]$
  90   1      
  91   1        // $[P1MDIN - Port 1 Input Mode]
  92   1        // [P1MDIN - Port 1 Input Mode]$
  93   1      
  94   1        // $[P1SKIP - Port 1 Skip]
  95   1        // [P1SKIP - Port 1 Skip]$
  96   1      
  97   1        // $[P1MASK - Port 1 Mask]
  98   1        // [P1MASK - Port 1 Mask]$
  99   1      
 100   1        // $[P1MAT - Port 1 Match]
 101   1        // [P1MAT - Port 1 Match]$
 102   1      
 103   1      }
 104          
 105          extern void
 106          PBCFG_0_enter_DefaultMode_from_RESET (void)
 107          {
 108   1        // $[XBR2 - Port I/O Crossbar 2]
 109   1        /***********************************************************************
 110   1         - Weak Pullups enabled 
 111   1         - Crossbar enabled
 112   1         ***********************************************************************/
 113   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 114   1        // [XBR2 - Port I/O Crossbar 2]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/23/2021 11:07:02 PAGE 3   

 115   1      
 116   1        // $[PRTDRV - Port Drive Strength]
 117   1        // [PRTDRV - Port Drive Strength]$
 118   1      
 119   1        // $[XBR0 - Port I/O Crossbar 0]
 120   1        // [XBR0 - Port I/O Crossbar 0]$
 121   1      
 122   1        // $[XBR1 - Port I/O Crossbar 1]
 123   1        // [XBR1 - Port I/O Crossbar 1]$
 124   1      
 125   1      }
 126          
 127          extern void
 128          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 129          {
 130   1        // $[CKCON0 - Clock Control 0]
 131   1        /***********************************************************************
 132   1         - System clock divided by 48
 133   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 134   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 135   1         - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 136   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 137   1         - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 138   1         - Timer 1 uses the clock defined by the prescale field, SCA
 139   1         ***********************************************************************/
 140   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_48 | CKCON0_T0M__PRESCALE
 141   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 142   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 143   1            | CKCON0_T1M__PRESCALE;
 144   1        // [CKCON0 - Clock Control 0]$
 145   1      
 146   1        // $[TMOD - Timer 0/1 Mode]
 147   1        // [TMOD - Timer 0/1 Mode]$
 148   1      
 149   1        // $[TCON - Timer 0/1 Control]
 150   1        /***********************************************************************
 151   1         - Start Timer 0 running
 152   1         ***********************************************************************/
 153   1        TCON |= TCON_TR0__RUN;
 154   1        // [TCON - Timer 0/1 Control]$
 155   1      
 156   1      }
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    100    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
