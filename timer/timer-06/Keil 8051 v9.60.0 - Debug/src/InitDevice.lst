C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/23/2021 15:34:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\kovac\D
                    -esktop\miclab-zh-1\efm8-bb1-low-cost-board\timer\timer-06\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARN
                    -INGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\kovac\Desktop\m
                    -iclab-zh-1\efm8-bb1-low-cost-board\timer\timer-06\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Dev
                    -ice/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/EFM8BB1/inc) PRINT(.\src\Ini
                    -tDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_1_enter_DefaultMode_from_RESET ();
  28   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  29   1        TIMER16_2_enter_DefaultMode_from_RESET ();
  30   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  31   1        // [Config Calls]$
  32   1      
  33   1      }
  34          
  35          extern void
  36          WDT_0_enter_DefaultMode_from_RESET (void)
  37          {
  38   1        // $[Watchdog Timer Init Variable Declarations]
  39   1        uint32_t i;
  40   1        bool ea;
  41   1        // [Watchdog Timer Init Variable Declarations]$
  42   1      
  43   1        // $[WDTCN - Watchdog Timer Control]
  44   1        // Deprecated
  45   1        // [WDTCN - Watchdog Timer Control]$
  46   1      
  47   1        // $[WDTCN_2 - Watchdog Timer Control]
  48   1      
  49   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  50   1        WDTCN = 0xA5;
  51   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/23/2021 15:34:46 PAGE 2   

  52   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  53   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  54   1          {
  55   2            NOP ();
  56   2          }
  57   1      
  58   1        // Disable WDT
  59   1        ea = IE_EA;
  60   1        IE_EA = 0;
  61   1        WDTCN = 0xDE;
  62   1        WDTCN = 0xAD;
  63   1        IE_EA = ea;
  64   1      
  65   1        // [WDTCN_2 - Watchdog Timer Control]$
  66   1      
  67   1      }
  68          
  69          extern void
  70          PBCFG_0_enter_DefaultMode_from_RESET (void)
  71          {
  72   1        // $[XBR2 - Port I/O Crossbar 2]
  73   1        /***********************************************************************
  74   1         - Weak Pullups enabled 
  75   1         - Crossbar enabled
  76   1         ***********************************************************************/
  77   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
  78   1        // [XBR2 - Port I/O Crossbar 2]$
  79   1      
  80   1        // $[PRTDRV - Port Drive Strength]
  81   1        // [PRTDRV - Port Drive Strength]$
  82   1      
  83   1        // $[XBR0 - Port I/O Crossbar 0]
  84   1        // [XBR0 - Port I/O Crossbar 0]$
  85   1      
  86   1        // $[XBR1 - Port I/O Crossbar 1]
  87   1        // [XBR1 - Port I/O Crossbar 1]$
  88   1      
  89   1      }
  90          
  91          extern void
  92          PORTS_1_enter_DefaultMode_from_RESET (void)
  93          {
  94   1        // $[P1 - Port 1 Pin Latch]
  95   1        // [P1 - Port 1 Pin Latch]$
  96   1      
  97   1        // $[P1MDOUT - Port 1 Output Mode]
  98   1        /***********************************************************************
  99   1         - P1.0 output is open-drain
 100   1         - P1.1 output is open-drain
 101   1         - P1.2 output is open-drain
 102   1         - P1.3 output is open-drain
 103   1         - P1.4 output is push-pull
 104   1         - P1.5 output is open-drain
 105   1         - P1.6 output is open-drain
 106   1         - P1.7 output is open-drain
 107   1         ***********************************************************************/
 108   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 109   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
 110   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
 111   1            | P1MDOUT_B7__OPEN_DRAIN;
 112   1        // [P1MDOUT - Port 1 Output Mode]$
 113   1      
 114   1        // $[P1MDIN - Port 1 Input Mode]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/23/2021 15:34:46 PAGE 3   

 115   1        // [P1MDIN - Port 1 Input Mode]$
 116   1      
 117   1        // $[P1SKIP - Port 1 Skip]
 118   1        // [P1SKIP - Port 1 Skip]$
 119   1      
 120   1        // $[P1MASK - Port 1 Mask]
 121   1        // [P1MASK - Port 1 Mask]$
 122   1      
 123   1        // $[P1MAT - Port 1 Match]
 124   1        // [P1MAT - Port 1 Match]$
 125   1      
 126   1      }
 127          
 128          extern void
 129          TIMER16_2_enter_DefaultMode_from_RESET (void)
 130          {
 131   1        // $[Timer Initialization]
 132   1        // Save Timer Configuration
 133   1        uint8_t TMR2CN0_TR2_save;
 134   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 135   1        // Stop Timer
 136   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 137   1        // [Timer Initialization]$
 138   1      
 139   1        // $[TMR2CN0 - Timer 2 Control]
 140   1        // [TMR2CN0 - Timer 2 Control]$
 141   1      
 142   1        // $[TMR2H - Timer 2 High Byte]
 143   1        // [TMR2H - Timer 2 High Byte]$
 144   1      
 145   1        // $[TMR2L - Timer 2 Low Byte]
 146   1        // [TMR2L - Timer 2 Low Byte]$
 147   1      
 148   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 149   1        /***********************************************************************
 150   1         - Timer 2 Reload High Byte = 0xCE
 151   1         ***********************************************************************/
 152   1        TMR2RLH = (0xCE << TMR2RLH_TMR2RLH__SHIFT);
 153   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 154   1      
 155   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
 156   1        /***********************************************************************
 157   1         - Timer 2 Reload Low Byte = 0x28
 158   1         ***********************************************************************/
 159   1        TMR2RLL = (0x28 << TMR2RLL_TMR2RLL__SHIFT);
 160   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 161   1      
 162   1        // $[TMR2CN0]
 163   1        /***********************************************************************
 164   1         - Start Timer 2 running
 165   1         ***********************************************************************/
 166   1        TMR2CN0 |= TMR2CN0_TR2__RUN;
 167   1        // [TMR2CN0]$
 168   1      
 169   1        // $[Timer Restoration]
 170   1        // Restore Timer Configuration
 171   1        TMR2CN0 |= TMR2CN0_TR2_save;
 172   1        // [Timer Restoration]$
 173   1      
 174   1      }
 175          
 176          extern void
 177          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        10/23/2021 15:34:46 PAGE 4   

 178          {
 179   1        // $[EIE1 - Extended Interrupt Enable 1]
 180   1        // [EIE1 - Extended Interrupt Enable 1]$
 181   1      
 182   1        // $[EIP1 - Extended Interrupt Priority 1]
 183   1        // [EIP1 - Extended Interrupt Priority 1]$
 184   1      
 185   1        // $[IE - Interrupt Enable]
 186   1        /***********************************************************************
 187   1         - Enable each interrupt according to its individual mask setting
 188   1         - Disable external interrupt 0
 189   1         - Disable external interrupt 1
 190   1         - Disable all SPI0 interrupts
 191   1         - Disable all Timer 0 interrupt
 192   1         - Disable all Timer 1 interrupt
 193   1         - Enable interrupt requests generated by the TF2L or TF2H flags
 194   1         - Disable UART0 interrupt
 195   1         ***********************************************************************/
 196   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 197   1            | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED
 198   1            | IE_ES0__DISABLED;
 199   1        // [IE - Interrupt Enable]$
 200   1      
 201   1        // $[IP - Interrupt Priority]
 202   1        // [IP - Interrupt Priority]$
 203   1      
 204   1      }
 205          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    119    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
